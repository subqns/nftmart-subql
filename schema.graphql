type Address @entity {

  id: ID! #id is a required field

  address: String!

  creationBlock: BigInt!

  creationTime: Date!
}

type Block @entity {
  id: ID!

  number: BigInt
  timestamp: Date
  parentHash: String
  specVersion: Int

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!

  method: String
  section: String
  args: String
  signer: Account #create relation to account
  nonce: BigInt
  timestamp: Date
  signature: String
  tip: BigInt
  isSigned: Boolean
  isSuccess: Boolean

  block: Block #create relation to block

  events: [Event] @derivedFrom(field: "extrinsic")
  calls: [Call] @derivedFrom(field: "extrinsic")
}

type Event @entity {
  id: ID!

  index: Int!
  section: String!
  method: String!
  data: String!

  block: Block #create relation to block
  extrinsic: Extrinsic #create relation to extrinsic
}

type Call @entity {
  id: ID!

  section: String
  method: String
  args: String
  timestamp: Date
  isSuccess: Boolean

  block: Block #create relation to block
  signer: Account #create ration to account
  extrinsic: Extrinsic #create relation to extrinsic
  parentCall: Call #create relation to call

  calls: [Call] @derivedFrom(field: "parentCall")
}

type Account @entity {
  id: ID!

  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
  calls: [Call] @derivedFrom(field: "signer")

  transferIn: [Transfer] @derivedFrom(field: "to")
  transferOut: [Transfer] @derivedFrom(field: "from")

}

type Token @entity {
  id: ID!

  decimal: Int
  name: String
}

type Transfer @entity {
  id: ID!

  from: Account
  to: Account
  token: Token
  amount: BigInt

  block: Block #create relation to block
  extrinsic: Extrinsic #create relation to extrinsic
  call: Call #create relation to call
  timestamp: Date
  isSuccess: Boolean

  debug: String
}

type Category @entity {
  id: ID!

  creator: Account
  name: String

  orders: [Order] @derivedFrom(field: "category")

  debug: String
}

type Class @entity {
  id: ID!

  creator: Account
  metadata: Metadata
  name: String
  description: String

  transferable: Boolean
  burnable: Boolean

  nfts: [Nft] @derivedFrom(field: "class")
  debug: String
}

type Nft @entity {
  id: ID!

  tokenId: String
  class: Class #create relation to class
  burned: Boolean
  orders: [Order] @derivedFrom(field: "nft")
}

type NftTransfer @entity {
  id: ID!

  from: Account
  to: Account
  nft: Nft

  block: Block #create relation to block
  extrinsic: Extrinsic #create relation to extrinsic
  timestamp: Date
  isSuccess: Boolean

  debug: String
}

type Order @entity {
  id: ID!

  currencyId: Int
  deadline: Int

  status: String # one of Created / Cancelled / Completed

  expectedPrice: BigInt
  acceptedPrice: BigInt
  deposit: BigInt

  seller: Account #create relation to Account
  buyer: Account #create relation to Account

  nft: Nft #create relation to Nft
  category: Category #create relation to category

  timestamp: Date

  block: Block #create relation to Block
  extrinsic: Extrinsic #create relation to extrinsic
  isSuccess: Boolean

  debug: String
}

type TakeOrder @entity {
  id: ID!

  currencyId: Int
  deadline: Int

  expectedprice: BigInt
  acceptedPrice: BigInt

  seller: Account #create relation to Account
  buyer: Account #create relation to Account

  status: String # Canceled / Pending / Expired / Closed

  nft: Nft #create relation to Nft
  category: Category #create relation to category

  openedAt: Date
  closedAt: Date

  debug: String
}

enum OrderStatus {
  Created
  Completed
  Cancelled
}

type Metadata @jsonField {
  description: String!
  externalUrl: String!
  name: String!
  url: String!
}


type NftUser @entity {
  id: ID!
  description: String
  avatar: String
  nickname: String
  media: String
  feature: String
  last_login_time: Date
  last_login_ip: String
  login_times: Int
  created_at: Date
  updated_at: Date
  deleted_at: Date

  classes: [NftClass] @derivedFrom(field: "user")
  nfts: [NftNft] @derivedFrom(field: "user")
}


type NftClass @entity {
  id: ID!
  name: String
  logo: String
  feature: String
  category: NftCategory #create relation to nft_category
  description: String
  user: NftUser # create relation to nft_user
  metadata: String!
  authentication: Int
  royalty: Int
  owner: String
  admins: String
  created_at: Date
  updated_at: Date
  deleted_at: Date
}

type NftCategory @entity {
  id: ID!
  name: String
  created_at: Date
  updated_at: Date
  deleted_at: Date
}

type NftNft @entity {
  id: ID!
  token_id: String
  class: NftClass #create relation to nft_class
  file_type: Int
  cid: String
  metadata: Metadata
  authentication: Int
  royalty: Int
  user: NftUser # create relation to nft_user
  creater: String
  status: String
  category_id: Int
  created_at: Date
  updated_at: Date
  deleted_at: Date
}

type NftTradeRecord @entity {
  id: ID!
  nft_id: String
  nft: NftNft # create relation to nft_nft
  type: Int
  block_height: String
  block_hash: String
  token: String
  price: String
  buyer: NftUser # create relation to nft_user
  seller: NftUser # create relation to nft_user
  direction: Int
  status: Int
  trade_id: String
  created_at: Date
  updated_at: Date
  deleted_at: Date
}

type NfRebateRecord @entity {
  id: ID!
  trade: NftTradeRecord  # create relation to nft_trade_record
  user: NftUser # create relation to nft_user
  nft: NftNft # create relation to nft_nft
  token: String
  fee: String
  rate: String
  created_at: Date
  updated_at: Date
  deleted_at: Date
}

type NfBenefitRecord @entity {
  id: ID!
  trade: NftTradeRecord  # create relation to nft_trade_record
  user: NftUser # create relation to nft_user
  nft: NftNft # create relation to nft_nft
  token: String
  fee: String
  rate: String
  created_at: Date
  updated_at: Date
  deleted_at: Date
}

type NfTradeTaxRecord @entity {
  id: ID!
  trade: NftTradeRecord  # create relation to nft_trade_record
  nft: NftNft # create relation to nft_nft
  token: String
  fee: String
  rate: String
  created_at: Date
  updated_at: Date
  deleted_at: Date
}


type NfCollectRecord @entity {
  id: ID!
  user: NftUser # create relation to nft_user
  nft: NftNft # create relation to nft_nft
  created_at: Date
  updated_at: Date
  deleted_at: Date
}

type NfTokenRecord @entity {
  id: ID!
  user: NftUser # create relation to nft_user
  token: String
  amount: String
  type: Int
  created_at: Date
  updated_at: Date
  deleted_at: Date
}

type NfBrowseRecord @entity {
  id: ID!
  nft: NftNft # create relation to nft_nft
  token: String
  created_at: Date
  updated_at: Date
  deleted_at: Date
}

type BadData @entity {
  id: ID!
  data: String
  reason: String
}
